(()=>{var t={300:()=>{AFRAME.registerComponent("blend-transforms",{schema:{objectA:{type:"selector"},objectB:{type:"selector"},percentage:{type:"number",default:0}},init(){this.worldMatrixA=new THREE.Matrix4,this.worldMatrixB=new THREE.Matrix4,this.localMatrixA=new THREE.Matrix4,this.localMatrixB=new THREE.Matrix4,this.data.objectA||console.log("Inherit Transform: ObjectA is null"),this.data.objectB||console.log("Inherit Transform: ObjectB is null"),console.log(`Inherit Transform... A: ${this.data.objectA.id}, B: ${this.data.objectB.id}`)},update(){this.alpha=this.data.percentage/100,this.worldMatrixA.copy(this.data.objectA.object3D.matrixWorld),this.worldMatrixB.copy(this.data.objectB.object3D.matrixWorld),this.localMatrixA.copy(this.data.objectA.object3D.matrix),this.localMatrixB.copy(this.data.objectB.object3D.matrix),this.updateTransform()},updateTransform:function(){const t=new THREE.Vector3,e=new THREE.Vector3,a=new THREE.Quaternion,o=new THREE.Quaternion,i=new THREE.Matrix4;return function(){this.setMostSuitableParent(),i.copy(this.el.object3D.parent.matrixWorld),i.invert();const r=this.data.objectA.object3D,s=this.data.objectB.object3D;r.getWorldPosition(t),s.getWorldPosition(e),this.el.object3D.position.lerpVectors(t,e,this.alpha),r.getWorldScale(t),s.getWorldScale(e),this.el.object3D.scale.lerpVectors(t,e,this.alpha),r.getWorldQuaternion(a),s.getWorldQuaternion(o),THREE.Quaternion.slerp(a,o,this.el.object3D.quaternion,this.alpha),this.el.object3D.applyMatrix4(i)}}(),setMostSuitableParent(){this.alpha<=.4?this.el.object3D.parent!==this.data.objectA.object3D.parent&&this.data.objectA.object3D.parent.add(this.el.object3D):this.alpha>=.6&&this.el.object3D.parent!==this.data.objectB.object3D.parent&&this.data.objectB.object3D.parent.add(this.el.object3D)},tick(t,e){let a;0===this.alpha?this.localMatrixA.equals(this.data.objectA.object3D.matrix)||(a=!0):1===this.alpha?this.localMatrixB.equals(this.data.objectB.object3D.matrix)||(a=!0):(this.data.objectA.object3D.updateMatrixWorld(),this.worldMatrixA.equals(this.data.objectA.object3D.matrixWorld)||(this.worldMatrixA.copy(this.data.objectA.object3D.matrixWorld),a=!0),this.data.objectB.object3D.updateMatrixWorld(),this.worldMatrixB.equals(this.data.objectB.object3D.matrixWorld)||(this.worldMatrixB.copy(this.data.objectB.object3D.matrixWorld),a=!0)),a&&this.updateTransform()}})}},e={};!function a(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o](r,r.exports,a),r.exports}(300)})();